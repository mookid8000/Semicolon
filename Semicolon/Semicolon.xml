<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Semicolon</name>
    </assembly>
    <members>
        <member name="T:Semicolon.Attributes.CsvColumnAttribute">
            <summary>
            Attribute to indicate that a property of a class must be bound to a value from a CSV row
            </summary>
        </member>
        <member name="P:Semicolon.Attributes.CsvColumnAttribute.Name">
            <summary>
            The name of the CSV header. This is how a specific property gets bound to a specific column in the CSV format.
            </summary>
        </member>
        <member name="P:Semicolon.Attributes.CsvColumnAttribute.Binder">
            <summary>
            Binder to use if a) the type of the property does not have a default binder (is not <see cref="T:System.Int32"/>, <see cref="T:System.Double"/>, <see cref="T:System.DateTime"/>, etc.), or b) you want to affect how the value is bound (e.g. use custom <see cref="T:System.DateTime"/> format)
            </summary>
        </member>
        <member name="M:Semicolon.Attributes.CsvColumnAttribute.#ctor(System.String)">
            <summary>
            Create the attribute
            </summary>
        </member>
        <member name="T:Semicolon.Binding.IBinder">
            <summary>
            A "binder" is what parses a value from the CSV format and returns a correponding value to be set on the row type
            </summary>
        </member>
        <member name="M:Semicolon.Binding.IBinder.GetValue(System.Globalization.CultureInfo,System.String)">
            <summary>
            Gets the value
            </summary>
            <param name="culture">Culture configured in the CSV parser</param>
            <param name="str">String value from the cell to be parsed</param>
            <returns>Must return an <see cref="T:System.Object"/> as the value to be set on the property of the row type</returns>
        </member>
        <member name="T:Semicolon.Binding.Predefined">
            <summary>
            Contains all the predefined binders
            </summary>
        </member>
        <member name="T:Semicolon.Exceptions.CsvParserException">
            <summary>
            Exception thrown when CSV could not be parsed
            </summary>
        </member>
        <member name="M:Semicolon.Exceptions.CsvParserException.#ctor(System.String)">
            <summary>
            Creates the exception
            </summary>
        </member>
        <member name="M:Semicolon.Exceptions.CsvParserException.#ctor(System.String,System.Exception)">
            <summary>
            Creates the exception
            </summary>
        </member>
        <member name="M:Semicolon.Options.Default">
            <summary>
            Gets the default options
            </summary>
        </member>
        <member name="P:Semicolon.Options.ColumnSeparator">
            <summary>
            Configures which separator to expect between columns
            </summary>
        </member>
        <member name="P:Semicolon.Options.CultureInfo">
            <summary>
            Configures which <see cref="P:Semicolon.Options.CultureInfo"/> to be used when automatically binding values that accept an <see cref="T:System.IFormatProvider"/>
            </summary>
        </member>
        <member name="P:Semicolon.Options.Headers">
            <summary>
            When set, it is assumed that the CSV has no headers and the cells come in the order specifiec here
            </summary>
        </member>
        <member name="P:Semicolon.Options.ValueDelimiter">
            <summary>
            When set, values are expected to be surrounded by pairs of these. Default is <code>null</code>,
            which means that values are expected to not be delimited
            </summary>
        </member>
        <member name="T:Semicolon.Parser`1">
            <summary>
            This is the main parser class. New this one up, passing as <typeparamref name="TRow"/>  the type you want to represent each row of data to extract.
            Please note that the type does not have to bind to ALL columns of the CSV data, but all columns (configured with <see cref="T:Semicolon.Attributes.CsvColumnAttribute"/>
            on properties with public setters) MUST be resolveable from the column name configured.
            </summary>
        </member>
        <member name="M:Semicolon.Parser`1.#ctor">
            <summary>
            Creates the parser with default options
            </summary>
        </member>
        <member name="M:Semicolon.Parser`1.#ctor(Semicolon.Options)">
            <summary>
            Creates the CSV parser using the given <paramref name="options"/>. If no options are given, <see cref="M:Semicolon.Options.Default"/> will be used
            </summary>
        </member>
        <member name="M:Semicolon.Parser`1.ParseCsv(System.String)">
            <summary>
            Parses the given CSV string
            </summary>
        </member>
        <member name="M:Semicolon.Parser`1.ParseCsv(System.IO.TextReader)">
            <summary>
            Parses CSV from the given <paramref name="textReader"/>
            </summary>
        </member>
    </members>
</doc>
